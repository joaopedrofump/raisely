{"version":3,"sources":["background.jpg","Signup.tsx","network.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","root","height","width","position","background","Image","WebkitBackgroundSize","MozBackgroundSize","OBackgroundSize","backgroundSize","zIndex","form","card","opacity","padding","borderRadius","margin","boxShadow","submit","overflow","fields","field","marginBottom","success","color","palette","main","unknown","visibility","message","textShadow","fontWeight","textAlign","fontSize","messageWrapper","marginTop","eye","cursor","Signup","classes","useState","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","validName","setValidName","validEmail","setValidEmail","validPassword","setValidPassword","samePassword","setSamePassword","setter","propertySetter","event","target","value","resetFieldValidation","validationSetter","showPassword","hidePassword","loading","setLoading","error","setError","done","setDone","setMessage","passwordType","setPasswordType","confirmPasswordType","setConfirmPasswordType","Box","className","Grid","container","justify","item","xs","sm","md","lg","xl","Card","elevation","direction","alignItems","Typography","variant","TextField","disabled","label","fullWidth","required","type","helperText","onChange","onSelect","InputProps","endAdornment","InputAdornment","onTouchStart","onTouchCancel","onTouchEnd","onMouseDown","onMouseUp","RemoveRedEye","Button","onClick","nameValidation","test","emailValidation","passwordValidation","samePasswordValidation","validateFields","split","firstName","lastName","payload","campaignUuid","data","url","Promise","res","rej","a","fetch","headers","method","body","JSON","stringify","result","json","parsed","ok","then","substring","length","preferredName","catch","err","genericError","console","errors","finally","CircularProgress","size","createMuiTheme","primary","secondary","default","paper","text","typography","fontFamily","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75705975.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.103537d5.jpg\";","import React, { useState } from 'react'\nimport { Card, Grid, makeStyles, createStyles, Theme, Box, TextField, Typography, Button, CircularProgress, InputAdornment } from '@material-ui/core'\n\nimport {RemoveRedEye} from '@material-ui/icons'\n\nimport Image from './background.jpg'\nimport { fetchRequest, RAISELY_ENDPOINT } from './network'\n\nconst campaignUuid = \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\"\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n\n    root: {\n        height: '100vh',\n        width: '100vw',\n        position: 'relative',\n    },\n    background: {\n        background: `url(${Image}) no-repeat center center fixed`,\n        WebkitBackgroundSize: 'cover',\n        MozBackgroundSize: 'cover',\n        OBackgroundSize: 'cover',\n        backgroundSize: 'cover',\n        // filter: 'blur(2px)',\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        zIndex: -1,\n    },\n    form: {\n        zIndex: 1,\n    },\n    card: {\n        opacity: 0.90,\n        padding: 30,\n        borderRadius: 10,\n        margin: '50px 0',\n        boxShadow: '3px 3px 1px 3px black',\n    },\n\n    submit: {\n        width: '95px',\n        height: '45px',\n        overflow: 'hidden',\n    },\n    fields: {\n        margin: '20px 0',\n    },\n    field: {\n        marginBottom: 10,\n    },\n    success: {\n        color: theme.palette.success.main\n    },\n    unknown: {\n        visibility: 'hidden'\n    },\n    message: {\n        textShadow: 'black 10px 10px 10px',\n        fontWeight: 'bold',\n        textAlign: 'center',\n        fontSize: '1.3em',\n    },\n    messageWrapper: {\n        marginTop: 20,\n    },\n    eye: {\n        cursor: 'pointer'\n    }\n}))\n\nconst Signup = () => {\n\n    const classes = useStyles()\n\n    const [name, setName] = useState<string>('')\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const [confirmPassword, setConfirmPassword] = useState<string>('')\n\n\n    const [validName, setValidName] = useState<boolean>(true)\n    const [validEmail, setValidEmail] = useState<boolean>(true)\n    const [validPassword, setValidPassword] = useState<boolean>(true)\n    const [samePassword, setSamePassword] = useState<boolean>(true)\n\n    const setter = (propertySetter: Function) => (event: any) => propertySetter(event.target.value)\n    const resetFieldValidation = (validationSetter: Function) => () => validationSetter(true)\n\n    const showPassword = (setter: Function) => () => setter('text')\n    const hidePassword = (setter: Function) => () => setter('password')\n\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const [error, setError] = useState<boolean>(false)\n    const [done, setDone] = useState<boolean>(false)\n    \n    const [message, setMessage] = useState<string>('')\n\n    const [passwordType,setPasswordType] = useState<string>('password')\n    const [confirmPasswordType,setConfirmPasswordType] = useState<string>('password')\n\n    const validateFields = () => {\n\n        const nameValidation = /^[a-zA-Z\\xC0-\\uFFFF]+\\s+[a-zA-Z\\xC0-\\uFFFF]+\\s*$/.test(name)\n        const emailValidation = /^[a-zA-Z][a-zA-Z1-9]+@[a-zA-Z]+\\.[a-z]{2,}$/.test(email)\n        const passwordValidation = /^(?=.*[!-/:-@].*).{6,}$/.test(password)\n        const samePasswordValidation = password === confirmPassword\n\n        setValidName(nameValidation)\n        setValidEmail(emailValidation)\n        setValidPassword(passwordValidation)\n        setSamePassword(samePasswordValidation)\n\n        return nameValidation && emailValidation && passwordValidation && samePasswordValidation\n\n    }\n\n    const submit = () => {\n\n        setDone(false)\n\n        if (validateFields()) {\n\n            setLoading(true)\n\n            // setTimeout(() => {\n\n                const [firstName, lastName] = name.split(/\\s+/)\n\n                fetchRequest({ campaignUuid, data: { firstName, lastName, email, password } }, RAISELY_ENDPOINT)\n                    .then((result) => {\n\n                        setError(false)\n                        setMessage(`${result.message.substring(0,result.message.length-1)}, ${result.data.preferredName}! Check your email (${email}) to confirm your registration and start renting bikes with us!`)\n\n                    })\n                    .catch(err => {\n\n                        const genericError = 'Unkown error while registering. Please try again.'\n                        \n                        if(err === 'fetch error') {\n                            console.error('fetch error')\n                            setMessage(genericError)\n                        }\n                        else {                            \n                            setMessage(err.errors[0].message ?? genericError)\n                        }\n                        setError(true)\n\n                    })\n                    .finally(() => { \n                        setLoading(false)\n                        setDone(true)\n                    })\n\n\n            // }, 2000) //delay simulation\n\n        }\n\n    }\n\n    return (\n        <Box className={classes.root}>\n            <Box className={classes.background} />\n            <Grid container className={classes.form} justify={'center'}>\n                <Grid item xs={11} sm={9} md={7} lg={6}  xl={4}>\n                    <Card elevation={20} className={classes.card}>\n                        <Grid container direction=\"column\" alignItems=\"center\">\n                            <Grid item>\n                                <Typography variant=\"h4\">Welcome to Oporto City Bike</Typography>\n                                <Typography variant=\"subtitle2\">Register to rent the best bikes</Typography>\n                            </Grid>\n                            <Grid className={classes.fields} item container direction=\"column\">\n                                <Grid item container direction=\"row\" justify=\"space-around\">\n                                    <Grid item xs={11} sm={5} className={classes.field} >\n                                        <TextField\n                                            disabled={loading || (done && !error)}\n                                            label=\"full name\"\n                                            fullWidth\n                                            required\n                                            type=\"text\"\n                                            value={name}\n                                            error={!validName}\n                                            helperText={'2 names, first and last'}\n                                            onChange={setter(setName)}\n                                            onSelect={resetFieldValidation(setValidName)}\n                                            variant=\"filled\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={11} sm={5} className={classes.field}>\n                                        <TextField\n                                            disabled={loading || (done && !error)}\n                                            label=\"email\"\n                                            fullWidth\n                                            type=\"email\"\n                                            required\n                                            value={email}\n                                            onChange={setter(setEmail)}\n                                            error={!validEmail}\n                                            helperText={\"Email format\"}\n                                            onSelect={resetFieldValidation(setValidEmail)}\n                                            variant=\"filled\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                </Grid>\n                                <Grid item container direction=\"row\" justify=\"space-around\">\n                                    <Grid item xs={11} sm={5} className={classes.field}>\n                                        <TextField\n                                            disabled={loading || (done && !error)}\n                                            label=\"password\"\n                                            fullWidth\n                                            required\n                                            type={passwordType}\n                                            value={password}\n                                            onChange={setter(setPassword)}\n                                            error={!validPassword}\n                                            helperText={'Minimum 6 characters, 1 special'}\n                                            onSelect={resetFieldValidation(setValidPassword)}\n                                            variant=\"filled\"\n                                            color=\"secondary\"\n                                            InputProps={{\n                                                endAdornment: (\n                                                  <InputAdornment className={classes.eye} position=\"start\">\n                                                        <Box onTouchStart={showPassword(setPasswordType)} \n                                                            onTouchCancel={hidePassword(setPasswordType)} \n                                                            onTouchEnd={hidePassword(setPasswordType)} \n                                                            onMouseDown={showPassword(setPasswordType)}\n                                                            onMouseUp={hidePassword(setPasswordType)} \n                                                        >\n                                                            <RemoveRedEye />\n                                                        </Box>\n                                                  </InputAdornment>\n                                                ),\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={11} sm={5} className={classes.field}>\n                                        <TextField\n                                            disabled={loading || (done && !error)}\n                                            label=\"confirm password\"\n                                            fullWidth\n                                            type={confirmPasswordType}\n                                            required\n                                            value={confirmPassword}\n                                            onChange={setter(setConfirmPassword)}\n                                            error={!samePassword}\n                                            helperText={!samePassword ? 'Passwords do not match' : 'Password again'}\n                                            onSelect={() => { setValidPassword(true); setSamePassword(true) }}\n                                            variant=\"filled\"\n                                            color=\"secondary\"\n                                            InputProps={{\n                                                endAdornment: (\n                                                  <InputAdornment className={classes.eye} position=\"start\">\n                                                        <Box\n                                                            onTouchStart={showPassword(setConfirmPasswordType)} \n                                                            onTouchEnd={hidePassword(setConfirmPasswordType)}\n                                                            onTouchCancel={hidePassword(setConfirmPasswordType)}\n                                                            onMouseDown={showPassword(setConfirmPasswordType)}\n                                                             onMouseUp={hidePassword(setConfirmPasswordType)} \n                                                        >\n                                                            <RemoveRedEye />\n                                                        </Box>\n                                                  </InputAdornment>\n                                                ),\n                                            }}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item>\n                                <Button disabled={loading  || (done && !error)} className={classes.submit} onClick={submit} color=\"secondary\" variant=\"contained\">\n                                    {!loading \n                                        ? 'Signup' \n                                        : 'Signup'\n                                    }\n                                </Button>\n                            </Grid>\n                            <Grid item className={classes.messageWrapper}>\n                                {\n                                    loading \n                                        ? <CircularProgress size={25} color=\"secondary\"/>\n                                        : done \n                                            ? <Typography className={classes.message} variant=\"body1\" color={error ? 'error' : 'initial'}>{message}</Typography>\n                                            : null\n                                    \n                                }\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n\n}\n\nexport default Signup\n","export const RAISELY_ENDPOINT = \"https://api.raisely.com/v3/signup\"\n\nexport const fetchRequest = (payload: any, url: string) : Promise<any> => {\n\n    return new Promise(async (res:Function, rej:Function) =>{\n\n        try {\n            const result = await fetch(url,{headers:{'Content-Type':'application/json'}, method: 'post', body: JSON.stringify(payload)})\n            const parsed = await result.json()\n            if(result.ok) \n                res(parsed)\n            \n            else  \n                rej(parsed)\n        }\n\n        catch(err) {\n            rej('fetch error')\n        }\n    })\n\n}","import React from 'react'\nimport './App.css'\n\nimport {createMuiTheme, ThemeProvider, CssBaseline} from '@material-ui/core'\nimport Signup from './Signup'\n\nconst primary = '#954526'\nconst secondary = '#C37837'\n\nconst primaryText = 'rgba(240,240,240,0.7)'\n\nconst error = '#ee2010'\n\nconst background = '#E4C099'\nconst paper = '#403427'\n\n\nexport const theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: primary,\n        },\n        secondary: {\n          main:secondary,\n        },\n        background: {\n            default: background,\n            paper: paper\n        },\n        text: {\n          primary: primaryText,\n        },\n        error: {\n          main: error\n        },\n    },\n    typography: {\n      fontFamily: 'Titillium Web'\n    }\n})\n\nconst App = () => {\n  \n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n        <Signup />\n    </ThemeProvider>\n  )  \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}